// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DatabaseOps is an autogenerated mock type for the DatabaseOps type
type DatabaseOps struct {
	mock.Mock
}

// Get provides a mock function with given fields: query, data, args
func (_m *DatabaseOps) Get(query string, data interface{}, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, query, data)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...interface{}) error); ok {
		r0 = rf(query, data, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: query, args
func (_m *DatabaseOps) Insert(query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: query, data, args
func (_m *DatabaseOps) Select(query string, data interface{}, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, query, data)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...interface{}) error); ok {
		r0 = rf(query, data, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDatabaseOps interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabaseOps creates a new instance of DatabaseOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaseOps(t mockConstructorTestingTNewDatabaseOps) *DatabaseOps {
	mock := &DatabaseOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
